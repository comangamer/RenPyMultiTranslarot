# MIT License
# 
# Copyright (c) 2024 Mikhail Ivanov
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import time
from datetime import datetime
from googletrans import Translator
import re

def translate_text(text, target_language, translator):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        translation = translator.translate(text, dest=target_language)
        return translation.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def process_translation(input_file_name, output_file_name, target_language='french', replace_translate=False):
    start_time = time.time()
    
    if not os.path.exists(input_file_name):
        print(f"–§–∞–π–ª {input_file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return 0, 0, 0

    with open(input_file_name, 'r', encoding='utf-8') as input_file:
        lines = input_file.readlines()

    total_lines = len(lines)
    translated_count = 0
    total_source_chars = 0
    total_translation_chars = 0
    translator = Translator()

    with open(output_file_name, 'w', encoding='utf-8') as output_file:
        for line in lines:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Å "translate english"
            if replace_translate and 'translate english' in line:
                line = line.replace('translate english', f'translate {target_language}')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ old –∏ new
            old_match = re.match(r'^(\s*)old\s*(".*")', line)
            new_match = re.match(r'^(\s*)new\s*(".*")', line)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–ª–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            character_line_match = re.match(r'^(\s*)(\w+)\s*(".*")', line)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–º–µ–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
            if re.search(r'\[.*?\]', line):
                output_file.write(line)
                continue

            if old_match:
                # –°—Ç—Ä–æ–∫–∏ old –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                output_file.write(line)
            elif new_match:
                indent = new_match.group(1)
                new_text = new_match.group(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                if not re.search(r'[–∞-—è–ê-–Ø]', new_text):
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
                    translated_text = translate_text(new_text.strip('"'), target_language, translator)
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
                    total_source_chars += len(new_text.strip('"'))
                    total_translation_chars += len(translated_text)
                    
                    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É new
                    output_file.write(f'{indent}# {line.strip()}\n')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ new
                    output_file.write(f'{indent}new "{translated_text}"\n')
                    
                    translated_count += 1
                    print(f"–ü–µ—Ä–µ–≤–µ–ª new: {new_text} -> {translated_text}")
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    output_file.write(line)
            elif character_line_match:
                indent = character_line_match.group(1)
                character = character_line_match.group(2)
                text = character_line_match.group(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                if not re.search(r'[–∞-—è–ê-–Ø]', text):
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
                    translated_text = translate_text(text.strip('"'), target_language, translator)
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
                    total_source_chars += len(text.strip('"'))
                    total_translation_chars += len(translated_text)
                    
                    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    output_file.write(f'{indent}# {character} {text.strip()}\n')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    output_file.write(f'{indent}{character} "{translated_text}"\n')
                    
                    translated_count += 1
                    print(f"–ü–µ—Ä–µ–≤–µ–ª —Ä–µ–ø–ª–∏–∫—É {character}: {text} -> {translated_text}")
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    output_file.write(line)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫
                match = re.search(r'^(\s*).*?"([^"]+)"', line)
                if match and not re.search(r'[–∞-—è–ê-–Ø]', match.group(2)):
                    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
                    indent = match.group(1)
                    english_text = match.group(2)
                    
                    # –ü–µ—Ä–µ–≤–æ–¥
                    translated_text = translate_text(english_text, target_language, translator)
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
                    total_source_chars += len(english_text)
                    total_translation_chars += len(translated_text)
                    
                    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    output_file.write(f'{indent}# {line.strip()}\n')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
                    output_file.write(f'{indent}"{translated_text}"\n')
                    
                    translated_count += 1
                    print(f"–ü–µ—Ä–µ–≤–µ–ª: {english_text} -> {translated_text}")
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥—É, –ø–∏—à–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    output_file.write(line)

    total_time = time.time() - start_time
    print(f"\n–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {translated_count}")
    print(f"–°–∏–º–≤–æ–ª–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö: {total_source_chars}")
    print(f"–°–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö: {total_translation_chars}")

    return translated_count, total_source_chars, total_translation_chars

def translate_all_rpy_files(target_language, replace_translate):
    """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö .rpy —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ø–∞–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞"""
    output_directory = target_language
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    
    input_files = [f for f in os.listdir('.') if f.endswith('.rpy')]
    total_translated_lines = 0
    total_source_chars = 0
    total_translation_chars = 0

    for input_file_name in input_files:
        output_file_name = os.path.join(output_directory, input_file_name)
        
        print(f"\nüåç –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞: {input_file_name}")
        translated_count, source_chars, translation_chars = process_translation(input_file_name, output_file_name, target_language, replace_translate)
        
        total_translated_lines += translated_count
        total_source_chars += source_chars
        total_translation_chars += translation_chars

    print(f"\n‚ú® –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    print(f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_translated_lines}")
    print(f"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö: {total_source_chars}")
    print(f"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö: {total_translation_chars}")

    return total_translated_lines, total_source_chars, total_translation_chars

def main():
    print("üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ üåê")
    
    languages = {
        '1': 'arabic',
        '2': 'zh-CN',
        '3': 'dutch',
        '4': 'finnish',
        '5': 'french',
        '6': 'german',
        '7': 'hindi',
        '8': 'italian',
        '9': 'japanese',
        '10': 'korean',
        '11': 'norwegian',
        '12': 'portuguese', 
        '13': 'spanish',
        '14': 'swedish',
        '15': 'turkish',
        '16': 'ukrainian'
    }
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫:")
    for key, lang in languages.items():
        print(f"{key}. {lang}")
    
    lang_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —è–∑—ã–∫–∞: ")
    target_language = languages.get(lang_choice, 'french')
    
    replace_translate = input("–ó–∞–º–µ–Ω—è—Ç—å 'translate english' –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞? (y/n): ").lower() == 'y'
    
    translation_mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞:\n1. –ü–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n2. –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö .rpy —Ñ–∞–π–ª–æ–≤\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
    
    if translation_mode == '2':
        translate_all_rpy_files(target_language, replace_translate)
    else:
        input_file_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, script.rpy): ")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file_name = f"translated_{target_language}_{timestamp}.rpy"
        
        process_translation(input_file_name, output_file_name, target_language, replace_translate)

if __name__ == "__main__":
    main()
